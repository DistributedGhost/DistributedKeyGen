// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1-devel
// 	protoc        v3.6.1
// source: adkg.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ShareHAVSS_MessageType int32

const (
	ShareHAVSS_SHARE             ShareHAVSS_MessageType = 0
	ShareHAVSS_SEND              ShareHAVSS_MessageType = 1
	ShareHAVSS_ECHO              ShareHAVSS_MessageType = 2
	ShareHAVSS_READY             ShareHAVSS_MessageType = 3
	ShareHAVSS_SHARED            ShareHAVSS_MessageType = 4
	ShareHAVSS_RECONSTRUCT       ShareHAVSS_MessageType = 5
	ShareHAVSS_RECONSTRUCT_SHARE ShareHAVSS_MessageType = 6
)

// Enum value maps for ShareHAVSS_MessageType.
var (
	ShareHAVSS_MessageType_name = map[int32]string{
		0: "SHARE",
		1: "SEND",
		2: "ECHO",
		3: "READY",
		4: "SHARED",
		5: "RECONSTRUCT",
		6: "RECONSTRUCT_SHARE",
	}
	ShareHAVSS_MessageType_value = map[string]int32{
		"SHARE":             0,
		"SEND":              1,
		"ECHO":              2,
		"READY":             3,
		"SHARED":            4,
		"RECONSTRUCT":       5,
		"RECONSTRUCT_SHARE": 6,
	}
)

func (x ShareHAVSS_MessageType) Enum() *ShareHAVSS_MessageType {
	p := new(ShareHAVSS_MessageType)
	*p = x
	return p
}

func (x ShareHAVSS_MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ShareHAVSS_MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_adkg_proto_enumTypes[0].Descriptor()
}

func (ShareHAVSS_MessageType) Type() protoreflect.EnumType {
	return &file_adkg_proto_enumTypes[0]
}

func (x ShareHAVSS_MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ShareHAVSS_MessageType.Descriptor instead.
func (ShareHAVSS_MessageType) EnumDescriptor() ([]byte, []int) {
	return file_adkg_proto_rawDescGZIP(), []int{0, 0}
}

type SendHAVSS_MessageType int32

const (
	SendHAVSS_SHARE             SendHAVSS_MessageType = 0
	SendHAVSS_SEND              SendHAVSS_MessageType = 1
	SendHAVSS_ECHO              SendHAVSS_MessageType = 2
	SendHAVSS_READY             SendHAVSS_MessageType = 3
	SendHAVSS_SHARED            SendHAVSS_MessageType = 4
	SendHAVSS_RECONSTRUCT       SendHAVSS_MessageType = 5
	SendHAVSS_RECONSTRUCT_SHARE SendHAVSS_MessageType = 6
)

// Enum value maps for SendHAVSS_MessageType.
var (
	SendHAVSS_MessageType_name = map[int32]string{
		0: "SHARE",
		1: "SEND",
		2: "ECHO",
		3: "READY",
		4: "SHARED",
		5: "RECONSTRUCT",
		6: "RECONSTRUCT_SHARE",
	}
	SendHAVSS_MessageType_value = map[string]int32{
		"SHARE":             0,
		"SEND":              1,
		"ECHO":              2,
		"READY":             3,
		"SHARED":            4,
		"RECONSTRUCT":       5,
		"RECONSTRUCT_SHARE": 6,
	}
)

func (x SendHAVSS_MessageType) Enum() *SendHAVSS_MessageType {
	p := new(SendHAVSS_MessageType)
	*p = x
	return p
}

func (x SendHAVSS_MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SendHAVSS_MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_adkg_proto_enumTypes[1].Descriptor()
}

func (SendHAVSS_MessageType) Type() protoreflect.EnumType {
	return &file_adkg_proto_enumTypes[1]
}

func (x SendHAVSS_MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SendHAVSS_MessageType.Descriptor instead.
func (SendHAVSS_MessageType) EnumDescriptor() ([]byte, []int) {
	return file_adkg_proto_rawDescGZIP(), []int{1, 0}
}

type EchoHAVSS_MessageType int32

const (
	EchoHAVSS_SHARE             EchoHAVSS_MessageType = 0
	EchoHAVSS_SEND              EchoHAVSS_MessageType = 1
	EchoHAVSS_ECHO              EchoHAVSS_MessageType = 2
	EchoHAVSS_READY             EchoHAVSS_MessageType = 3
	EchoHAVSS_SHARED            EchoHAVSS_MessageType = 4
	EchoHAVSS_RECONSTRUCT       EchoHAVSS_MessageType = 5
	EchoHAVSS_RECONSTRUCT_SHARE EchoHAVSS_MessageType = 6
)

// Enum value maps for EchoHAVSS_MessageType.
var (
	EchoHAVSS_MessageType_name = map[int32]string{
		0: "SHARE",
		1: "SEND",
		2: "ECHO",
		3: "READY",
		4: "SHARED",
		5: "RECONSTRUCT",
		6: "RECONSTRUCT_SHARE",
	}
	EchoHAVSS_MessageType_value = map[string]int32{
		"SHARE":             0,
		"SEND":              1,
		"ECHO":              2,
		"READY":             3,
		"SHARED":            4,
		"RECONSTRUCT":       5,
		"RECONSTRUCT_SHARE": 6,
	}
)

func (x EchoHAVSS_MessageType) Enum() *EchoHAVSS_MessageType {
	p := new(EchoHAVSS_MessageType)
	*p = x
	return p
}

func (x EchoHAVSS_MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EchoHAVSS_MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_adkg_proto_enumTypes[2].Descriptor()
}

func (EchoHAVSS_MessageType) Type() protoreflect.EnumType {
	return &file_adkg_proto_enumTypes[2]
}

func (x EchoHAVSS_MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EchoHAVSS_MessageType.Descriptor instead.
func (EchoHAVSS_MessageType) EnumDescriptor() ([]byte, []int) {
	return file_adkg_proto_rawDescGZIP(), []int{2, 0}
}

type ReadyHAVSS_MessageType int32

const (
	ReadyHAVSS_SHARE             ReadyHAVSS_MessageType = 0
	ReadyHAVSS_SEND              ReadyHAVSS_MessageType = 1
	ReadyHAVSS_ECHO              ReadyHAVSS_MessageType = 2
	ReadyHAVSS_READY             ReadyHAVSS_MessageType = 3
	ReadyHAVSS_SHARED            ReadyHAVSS_MessageType = 4
	ReadyHAVSS_RECONSTRUCT       ReadyHAVSS_MessageType = 5
	ReadyHAVSS_RECONSTRUCT_SHARE ReadyHAVSS_MessageType = 6
)

// Enum value maps for ReadyHAVSS_MessageType.
var (
	ReadyHAVSS_MessageType_name = map[int32]string{
		0: "SHARE",
		1: "SEND",
		2: "ECHO",
		3: "READY",
		4: "SHARED",
		5: "RECONSTRUCT",
		6: "RECONSTRUCT_SHARE",
	}
	ReadyHAVSS_MessageType_value = map[string]int32{
		"SHARE":             0,
		"SEND":              1,
		"ECHO":              2,
		"READY":             3,
		"SHARED":            4,
		"RECONSTRUCT":       5,
		"RECONSTRUCT_SHARE": 6,
	}
)

func (x ReadyHAVSS_MessageType) Enum() *ReadyHAVSS_MessageType {
	p := new(ReadyHAVSS_MessageType)
	*p = x
	return p
}

func (x ReadyHAVSS_MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReadyHAVSS_MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_adkg_proto_enumTypes[3].Descriptor()
}

func (ReadyHAVSS_MessageType) Type() protoreflect.EnumType {
	return &file_adkg_proto_enumTypes[3]
}

func (x ReadyHAVSS_MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReadyHAVSS_MessageType.Descriptor instead.
func (ReadyHAVSS_MessageType) EnumDescriptor() ([]byte, []int) {
	return file_adkg_proto_rawDescGZIP(), []int{3, 0}
}

type ShareHAVSS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeMessage ShareHAVSS_MessageType `protobuf:"varint,1,opt,name=type_message,json=typeMessage,proto3,enum=adkg.ShareHAVSS_MessageType" json:"type_message,omitempty"`
	IdDealer    uint64                 `protobuf:"varint,2,opt,name=id_dealer,json=idDealer,proto3" json:"id_dealer,omitempty"`
	Secret      []byte                 `protobuf:"bytes,3,opt,name=secret,proto3" json:"secret,omitempty"`
}

func (x *ShareHAVSS) Reset() {
	*x = ShareHAVSS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adkg_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShareHAVSS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareHAVSS) ProtoMessage() {}

func (x *ShareHAVSS) ProtoReflect() protoreflect.Message {
	mi := &file_adkg_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareHAVSS.ProtoReflect.Descriptor instead.
func (*ShareHAVSS) Descriptor() ([]byte, []int) {
	return file_adkg_proto_rawDescGZIP(), []int{0}
}

func (x *ShareHAVSS) GetTypeMessage() ShareHAVSS_MessageType {
	if x != nil {
		return x.TypeMessage
	}
	return ShareHAVSS_SHARE
}

func (x *ShareHAVSS) GetIdDealer() uint64 {
	if x != nil {
		return x.IdDealer
	}
	return 0
}

func (x *ShareHAVSS) GetSecret() []byte {
	if x != nil {
		return x.Secret
	}
	return nil
}

type SendHAVSS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeMessage  SendHAVSS_MessageType `protobuf:"varint,1,opt,name=type_message,json=typeMessage,proto3,enum=adkg.SendHAVSS_MessageType" json:"type_message,omitempty"`
	IdDealer     uint64                `protobuf:"varint,2,opt,name=id_dealer,json=idDealer,proto3" json:"id_dealer,omitempty"`
	Commitment   []byte                `protobuf:"bytes,3,opt,name=commitment,proto3" json:"commitment,omitempty"`
	RecoveryPoly []byte                `protobuf:"bytes,4,opt,name=recovery_poly,json=recoveryPoly,proto3" json:"recovery_poly,omitempty"`
	SharePoly    []byte                `protobuf:"bytes,5,opt,name=share_poly,json=sharePoly,proto3" json:"share_poly,omitempty"`
}

func (x *SendHAVSS) Reset() {
	*x = SendHAVSS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adkg_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendHAVSS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendHAVSS) ProtoMessage() {}

func (x *SendHAVSS) ProtoReflect() protoreflect.Message {
	mi := &file_adkg_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendHAVSS.ProtoReflect.Descriptor instead.
func (*SendHAVSS) Descriptor() ([]byte, []int) {
	return file_adkg_proto_rawDescGZIP(), []int{1}
}

func (x *SendHAVSS) GetTypeMessage() SendHAVSS_MessageType {
	if x != nil {
		return x.TypeMessage
	}
	return SendHAVSS_SHARE
}

func (x *SendHAVSS) GetIdDealer() uint64 {
	if x != nil {
		return x.IdDealer
	}
	return 0
}

func (x *SendHAVSS) GetCommitment() []byte {
	if x != nil {
		return x.Commitment
	}
	return nil
}

func (x *SendHAVSS) GetRecoveryPoly() []byte {
	if x != nil {
		return x.RecoveryPoly
	}
	return nil
}

func (x *SendHAVSS) GetSharePoly() []byte {
	if x != nil {
		return x.SharePoly
	}
	return nil
}

type EchoHAVSS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeMessage EchoHAVSS_MessageType `protobuf:"varint,1,opt,name=type_message,json=typeMessage,proto3,enum=adkg.EchoHAVSS_MessageType" json:"type_message,omitempty"`
}

func (x *EchoHAVSS) Reset() {
	*x = EchoHAVSS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adkg_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EchoHAVSS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EchoHAVSS) ProtoMessage() {}

func (x *EchoHAVSS) ProtoReflect() protoreflect.Message {
	mi := &file_adkg_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EchoHAVSS.ProtoReflect.Descriptor instead.
func (*EchoHAVSS) Descriptor() ([]byte, []int) {
	return file_adkg_proto_rawDescGZIP(), []int{2}
}

func (x *EchoHAVSS) GetTypeMessage() EchoHAVSS_MessageType {
	if x != nil {
		return x.TypeMessage
	}
	return EchoHAVSS_SHARE
}

type ReadyHAVSS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeMessage ReadyHAVSS_MessageType `protobuf:"varint,1,opt,name=type_message,json=typeMessage,proto3,enum=adkg.ReadyHAVSS_MessageType" json:"type_message,omitempty"`
}

func (x *ReadyHAVSS) Reset() {
	*x = ReadyHAVSS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adkg_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadyHAVSS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadyHAVSS) ProtoMessage() {}

func (x *ReadyHAVSS) ProtoReflect() protoreflect.Message {
	mi := &file_adkg_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadyHAVSS.ProtoReflect.Descriptor instead.
func (*ReadyHAVSS) Descriptor() ([]byte, []int) {
	return file_adkg_proto_rawDescGZIP(), []int{3}
}

func (x *ReadyHAVSS) GetTypeMessage() ReadyHAVSS_MessageType {
	if x != nil {
		return x.TypeMessage
	}
	return ReadyHAVSS_SHARE
}

type ConsensusMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//	*ConsensusMessage_Share
	//	*ConsensusMessage_Send
	//	*ConsensusMessage_Echo
	//	*ConsensusMessage_Ready
	Payload isConsensusMessage_Payload `protobuf_oneof:"payload"`
}

func (x *ConsensusMessage) Reset() {
	*x = ConsensusMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adkg_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusMessage) ProtoMessage() {}

func (x *ConsensusMessage) ProtoReflect() protoreflect.Message {
	mi := &file_adkg_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusMessage.ProtoReflect.Descriptor instead.
func (*ConsensusMessage) Descriptor() ([]byte, []int) {
	return file_adkg_proto_rawDescGZIP(), []int{4}
}

func (m *ConsensusMessage) GetPayload() isConsensusMessage_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *ConsensusMessage) GetShare() *ShareHAVSS {
	if x, ok := x.GetPayload().(*ConsensusMessage_Share); ok {
		return x.Share
	}
	return nil
}

func (x *ConsensusMessage) GetSend() *SendHAVSS {
	if x, ok := x.GetPayload().(*ConsensusMessage_Send); ok {
		return x.Send
	}
	return nil
}

func (x *ConsensusMessage) GetEcho() *EchoHAVSS {
	if x, ok := x.GetPayload().(*ConsensusMessage_Echo); ok {
		return x.Echo
	}
	return nil
}

func (x *ConsensusMessage) GetReady() *ReadyHAVSS {
	if x, ok := x.GetPayload().(*ConsensusMessage_Ready); ok {
		return x.Ready
	}
	return nil
}

type isConsensusMessage_Payload interface {
	isConsensusMessage_Payload()
}

type ConsensusMessage_Share struct {
	Share *ShareHAVSS `protobuf:"bytes,1,opt,name=share,proto3,oneof"`
}

type ConsensusMessage_Send struct {
	Send *SendHAVSS `protobuf:"bytes,2,opt,name=send,proto3,oneof"`
}

type ConsensusMessage_Echo struct {
	Echo *EchoHAVSS `protobuf:"bytes,3,opt,name=echo,proto3,oneof"`
}

type ConsensusMessage_Ready struct {
	Ready *ReadyHAVSS `protobuf:"bytes,4,opt,name=ready,proto3,oneof"`
}

func (*ConsensusMessage_Share) isConsensusMessage_Payload() {}

func (*ConsensusMessage_Send) isConsensusMessage_Payload() {}

func (*ConsensusMessage_Echo) isConsensusMessage_Payload() {}

func (*ConsensusMessage_Ready) isConsensusMessage_Payload() {}

var File_adkg_proto protoreflect.FileDescriptor

var file_adkg_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x61, 0x64, 0x6b, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x61, 0x64,
	0x6b, 0x67, 0x22, 0xef, 0x01, 0x0a, 0x0a, 0x53, 0x68, 0x61, 0x72, 0x65, 0x48, 0x41, 0x56, 0x53,
	0x53, 0x12, 0x3f, 0x0a, 0x0c, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x61, 0x64, 0x6b, 0x67, 0x2e, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x48, 0x41, 0x56, 0x53, 0x53, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x64, 0x5f, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x69, 0x64, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x22, 0x6b, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x48, 0x41, 0x52, 0x45, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x45, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x45,
	0x43, 0x48, 0x4f, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x03,
	0x12, 0x0a, 0x0a, 0x06, 0x53, 0x48, 0x41, 0x52, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b,
	0x52, 0x45, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x10, 0x05, 0x12, 0x15, 0x0a,
	0x11, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x5f, 0x53, 0x48, 0x41,
	0x52, 0x45, 0x10, 0x06, 0x22, 0xb9, 0x02, 0x0a, 0x09, 0x53, 0x65, 0x6e, 0x64, 0x48, 0x41, 0x56,
	0x53, 0x53, 0x12, 0x3e, 0x0a, 0x0c, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x61, 0x64, 0x6b, 0x67, 0x2e,
	0x53, 0x65, 0x6e, 0x64, 0x48, 0x41, 0x56, 0x53, 0x53, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x64, 0x5f, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x69, 0x64, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x50, 0x6f, 0x6c, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x70, 0x6f,
	0x6c, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x50,
	0x6f, 0x6c, 0x79, 0x22, 0x6b, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x48, 0x41, 0x52, 0x45, 0x10, 0x00, 0x12, 0x08, 0x0a,
	0x04, 0x53, 0x45, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x45, 0x43, 0x48, 0x4f, 0x10,
	0x02, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06,
	0x53, 0x48, 0x41, 0x52, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x43, 0x4f,
	0x4e, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x45, 0x43,
	0x4f, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x10, 0x06,
	0x22, 0xb8, 0x01, 0x0a, 0x09, 0x45, 0x63, 0x68, 0x6f, 0x48, 0x41, 0x56, 0x53, 0x53, 0x12, 0x3e,
	0x0a, 0x0c, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x61, 0x64, 0x6b, 0x67, 0x2e, 0x45, 0x63, 0x68, 0x6f,
	0x48, 0x41, 0x56, 0x53, 0x53, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x6b,
	0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a,
	0x05, 0x53, 0x48, 0x41, 0x52, 0x45, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x45, 0x4e, 0x44,
	0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x45, 0x43, 0x48, 0x4f, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05,
	0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x48, 0x41, 0x52, 0x45,
	0x44, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x55,
	0x43, 0x54, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52,
	0x55, 0x43, 0x54, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x10, 0x06, 0x22, 0xba, 0x01, 0x0a, 0x0a,
	0x52, 0x65, 0x61, 0x64, 0x79, 0x48, 0x41, 0x56, 0x53, 0x53, 0x12, 0x3f, 0x0a, 0x0c, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1c, 0x2e, 0x61, 0x64, 0x6b, 0x67, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x79, 0x48, 0x41, 0x56,
	0x53, 0x53, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b,
	0x74, 0x79, 0x70, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x6b, 0x0a, 0x0b, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x48,
	0x41, 0x52, 0x45, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x45, 0x4e, 0x44, 0x10, 0x01, 0x12,
	0x08, 0x0a, 0x04, 0x45, 0x43, 0x48, 0x4f, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x45, 0x41,
	0x44, 0x59, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x48, 0x41, 0x52, 0x45, 0x44, 0x10, 0x04,
	0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x10,
	0x05, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54,
	0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x10, 0x06, 0x22, 0xbf, 0x01, 0x0a, 0x10, 0x43, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a,
	0x05, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61,
	0x64, 0x6b, 0x67, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x48, 0x41, 0x56, 0x53, 0x53, 0x48, 0x00,
	0x52, 0x05, 0x73, 0x68, 0x61, 0x72, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x73, 0x65, 0x6e, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x64, 0x6b, 0x67, 0x2e, 0x53, 0x65, 0x6e,
	0x64, 0x48, 0x41, 0x56, 0x53, 0x53, 0x48, 0x00, 0x52, 0x04, 0x73, 0x65, 0x6e, 0x64, 0x12, 0x25,
	0x0a, 0x04, 0x65, 0x63, 0x68, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61,
	0x64, 0x6b, 0x67, 0x2e, 0x45, 0x63, 0x68, 0x6f, 0x48, 0x41, 0x56, 0x53, 0x53, 0x48, 0x00, 0x52,
	0x04, 0x65, 0x63, 0x68, 0x6f, 0x12, 0x28, 0x0a, 0x05, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x64, 0x6b, 0x67, 0x2e, 0x52, 0x65, 0x61, 0x64,
	0x79, 0x48, 0x41, 0x56, 0x53, 0x53, 0x48, 0x00, 0x52, 0x05, 0x72, 0x65, 0x61, 0x64, 0x79, 0x42,
	0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x19, 0x5a, 0x17, 0x44, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x47, 0x65, 0x6e, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_adkg_proto_rawDescOnce sync.Once
	file_adkg_proto_rawDescData = file_adkg_proto_rawDesc
)

func file_adkg_proto_rawDescGZIP() []byte {
	file_adkg_proto_rawDescOnce.Do(func() {
		file_adkg_proto_rawDescData = protoimpl.X.CompressGZIP(file_adkg_proto_rawDescData)
	})
	return file_adkg_proto_rawDescData
}

var file_adkg_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_adkg_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_adkg_proto_goTypes = []interface{}{
	(ShareHAVSS_MessageType)(0), // 0: adkg.ShareHAVSS.MessageType
	(SendHAVSS_MessageType)(0),  // 1: adkg.SendHAVSS.MessageType
	(EchoHAVSS_MessageType)(0),  // 2: adkg.EchoHAVSS.MessageType
	(ReadyHAVSS_MessageType)(0), // 3: adkg.ReadyHAVSS.MessageType
	(*ShareHAVSS)(nil),          // 4: adkg.ShareHAVSS
	(*SendHAVSS)(nil),           // 5: adkg.SendHAVSS
	(*EchoHAVSS)(nil),           // 6: adkg.EchoHAVSS
	(*ReadyHAVSS)(nil),          // 7: adkg.ReadyHAVSS
	(*ConsensusMessage)(nil),    // 8: adkg.ConsensusMessage
}
var file_adkg_proto_depIdxs = []int32{
	0, // 0: adkg.ShareHAVSS.type_message:type_name -> adkg.ShareHAVSS.MessageType
	1, // 1: adkg.SendHAVSS.type_message:type_name -> adkg.SendHAVSS.MessageType
	2, // 2: adkg.EchoHAVSS.type_message:type_name -> adkg.EchoHAVSS.MessageType
	3, // 3: adkg.ReadyHAVSS.type_message:type_name -> adkg.ReadyHAVSS.MessageType
	4, // 4: adkg.ConsensusMessage.share:type_name -> adkg.ShareHAVSS
	5, // 5: adkg.ConsensusMessage.send:type_name -> adkg.SendHAVSS
	6, // 6: adkg.ConsensusMessage.echo:type_name -> adkg.EchoHAVSS
	7, // 7: adkg.ConsensusMessage.ready:type_name -> adkg.ReadyHAVSS
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_adkg_proto_init() }
func file_adkg_proto_init() {
	if File_adkg_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_adkg_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShareHAVSS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adkg_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendHAVSS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adkg_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EchoHAVSS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adkg_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadyHAVSS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adkg_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_adkg_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*ConsensusMessage_Share)(nil),
		(*ConsensusMessage_Send)(nil),
		(*ConsensusMessage_Echo)(nil),
		(*ConsensusMessage_Ready)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_adkg_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_adkg_proto_goTypes,
		DependencyIndexes: file_adkg_proto_depIdxs,
		EnumInfos:         file_adkg_proto_enumTypes,
		MessageInfos:      file_adkg_proto_msgTypes,
	}.Build()
	File_adkg_proto = out.File
	file_adkg_proto_rawDesc = nil
	file_adkg_proto_goTypes = nil
	file_adkg_proto_depIdxs = nil
}
